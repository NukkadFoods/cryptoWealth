{"ast":null,"code":"var _jsxFileName = \"/Users/mahendrabahubali/cryptowealth/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Get API base URL from environment or use default\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isEmailVerified, setIsEmailVerified] = useState(false);\n\n  // User tracking data\n  const [userSession, setUserSession] = useState({\n    ipAddress: null,\n    browserInfo: null,\n    timestamp: null,\n    location: null\n  });\n\n  // Get user's device and location info\n  const getUserInfo = async () => {\n    try {\n      // Get browser info only (no external API calls)\n      const browserInfo = {\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n        cookieEnabled: navigator.cookieEnabled,\n        onLine: navigator.onLine,\n        screenResolution: `${window.screen.width}x${window.screen.height}`,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      };\n      return {\n        ipAddress: 'Not collected',\n        browserInfo,\n        timestamp: new Date().toISOString(),\n        location: {\n          country: 'Not collected',\n          region: 'Not collected',\n          city: 'Not collected',\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n          isp: 'Not collected'\n        }\n      };\n    } catch (error) {\n      console.error('Error getting user info:', error);\n      return {\n        ipAddress: 'Unknown',\n        browserInfo: {\n          userAgent: navigator.userAgent,\n          platform: navigator.platform,\n          language: navigator.language\n        },\n        timestamp: new Date().toISOString(),\n        location: {\n          country: 'Unknown'\n        }\n      };\n    }\n  };\n\n  // Signup function\n  const signup = async (userData, captchaToken) => {\n    try {\n      setLoading(true);\n\n      // Get user tracking info\n      const trackingInfo = await getUserInfo();\n      const signupData = {\n        ...userData,\n        captchaToken,\n        trackingInfo,\n        emailVerified: false,\n        status: 'pending_verification'\n      };\n\n      // Send to backend API\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(signupData)\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setUserSession(trackingInfo);\n        return {\n          success: true,\n          message: 'Verification email sent! Please check your inbox.'\n        };\n      } else {\n        throw new Error(result.message || 'Signup failed');\n      }\n    } catch (error) {\n      console.error('Signup error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Email verification function\n  const verifyEmail = async verificationToken => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_BASE_URL}/auth/verify-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: verificationToken\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setIsEmailVerified(true);\n        setCurrentUser(result.user);\n        return {\n          success: true,\n          message: 'Email verified successfully!'\n        };\n      } else {\n        throw new Error(result.message || 'Verification failed');\n      }\n    } catch (error) {\n      console.error('Verification error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = async (email, password, captchaToken, source = 'unknown') => {\n    try {\n      console.log('🚀 Login attempt started from:', source, {\n        email,\n        API_BASE_URL\n      });\n      console.log('🔍 Parameters received:', {\n        email,\n        password: '[HIDDEN]',\n        captchaToken,\n        source\n      });\n      console.log('🔍 CALL STACK:', new Error().stack);\n      setLoading(true);\n      const trackingInfo = await getUserInfo();\n      console.log('📊 Tracking info:', trackingInfo);\n      const loginUrl = `${API_BASE_URL}/auth/login`;\n      console.log('🌐 Making request to:', loginUrl);\n      const requestBody = {\n        email,\n        password,\n        captchaToken,\n        trackingInfo\n      };\n      console.log('📝 Request body:', {\n        ...requestBody,\n        password: '[HIDDEN]'\n      });\n      const response = await fetch(loginUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      console.log('📡 Response status:', response.status);\n      console.log('📡 Response headers:', Object.fromEntries(response.headers.entries()));\n      const result = await response.json();\n      console.log('📦 Response data:', {\n        ...result,\n        token: result.token ? '[TOKEN]' : 'NO_TOKEN'\n      });\n      if (response.ok) {\n        console.log('✅ Login successful, setting user:', result.user);\n        setCurrentUser(result.user);\n        setIsEmailVerified(result.user.emailVerified);\n        setUserSession(trackingInfo);\n        localStorage.setItem('token', result.token);\n        console.log('✅ Token saved to localStorage:', result.token ? 'YES' : 'NO');\n        console.log('✅ Current user set:', !!result.user);\n        return {\n          success: true,\n          user: result.user\n        };\n      } else {\n        // Check if this is an email verification error\n        if (response.status === 403 && result.error === 'Email not verified') {\n          return {\n            success: false,\n            message: 'Email not verified. Please verify your email before logging in.',\n            needsVerification: true,\n            email: result.email\n          };\n        } else {\n          throw new Error(result.message || result.error || 'Login failed');\n        }\n      }\n    } catch (error) {\n      console.error('❌ Login error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setCurrentUser(null);\n    setIsEmailVerified(false);\n    setUserSession({});\n    localStorage.removeItem('token');\n  };\n\n  // Resend verification email\n  const resendVerificationEmail = async email => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/resend-verification`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Resend verification error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  };\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Verify token with backend\n      fetch(`${API_BASE_URL}/auth/verify-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token\n        })\n      }).then(response => response.json()).then(result => {\n        if (result.success) {\n          setCurrentUser(result.user);\n          setIsEmailVerified(result.user.emailVerified);\n        } else {\n          localStorage.removeItem('token');\n        }\n      }).catch(error => {\n        console.error('Token verification failed:', error);\n        localStorage.removeItem('token');\n      }).finally(() => {\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, []);\n  const value = {\n    currentUser,\n    isEmailVerified,\n    userSession,\n    signup,\n    login,\n    logout,\n    verifyEmail,\n    resendVerificationEmail,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"iM0EHFZ31VuOJgRxwE4nzQDGmsQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","isEmailVerified","setIsEmailVerified","userSession","setUserSession","ipAddress","browserInfo","timestamp","location","getUserInfo","userAgent","navigator","platform","language","cookieEnabled","onLine","screenResolution","window","screen","width","height","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","Date","toISOString","country","region","city","isp","error","console","signup","userData","captchaToken","trackingInfo","signupData","emailVerified","status","response","fetch","method","headers","body","JSON","stringify","result","json","ok","success","message","Error","verifyEmail","verificationToken","token","user","login","email","password","source","log","stack","loginUrl","requestBody","Object","fromEntries","entries","localStorage","setItem","needsVerification","logout","removeItem","resendVerificationEmail","getItem","then","catch","finally","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mahendrabahubali/cryptowealth/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Get API base URL from environment or use default\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isEmailVerified, setIsEmailVerified] = useState(false);\n\n  // User tracking data\n  const [userSession, setUserSession] = useState({\n    ipAddress: null,\n    browserInfo: null,\n    timestamp: null,\n    location: null\n  });\n\n  // Get user's device and location info\n  const getUserInfo = async () => {\n    try {\n      // Get browser info only (no external API calls)\n      const browserInfo = {\n        userAgent: navigator.userAgent,\n        platform: navigator.platform,\n        language: navigator.language,\n        cookieEnabled: navigator.cookieEnabled,\n        onLine: navigator.onLine,\n        screenResolution: `${window.screen.width}x${window.screen.height}`,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      };\n\n      return {\n        ipAddress: 'Not collected',\n        browserInfo,\n        timestamp: new Date().toISOString(),\n        location: {\n          country: 'Not collected',\n          region: 'Not collected',\n          city: 'Not collected',\n          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n          isp: 'Not collected'\n        }\n      };\n    } catch (error) {\n      console.error('Error getting user info:', error);\n      return {\n        ipAddress: 'Unknown',\n        browserInfo: {\n          userAgent: navigator.userAgent,\n          platform: navigator.platform,\n          language: navigator.language\n        },\n        timestamp: new Date().toISOString(),\n        location: { country: 'Unknown' }\n      };\n    }\n  };\n\n  // Signup function\n  const signup = async (userData, captchaToken) => {\n    try {\n      setLoading(true);\n      \n      // Get user tracking info\n      const trackingInfo = await getUserInfo();\n      \n      const signupData = {\n        ...userData,\n        captchaToken,\n        trackingInfo,\n        emailVerified: false,\n        status: 'pending_verification'\n      };\n\n      // Send to backend API\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(signupData)\n      });\n\n      const result = await response.json();\n      \n      if (response.ok) {\n        setUserSession(trackingInfo);\n        return { success: true, message: 'Verification email sent! Please check your inbox.' };\n      } else {\n        throw new Error(result.message || 'Signup failed');\n      }\n    } catch (error) {\n      console.error('Signup error:', error);\n      return { success: false, message: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Email verification function\n  const verifyEmail = async (verificationToken) => {\n    try {\n      setLoading(true);\n      \n      const response = await fetch(`${API_BASE_URL}/auth/verify-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token: verificationToken })\n      });\n\n      const result = await response.json();\n      \n      if (response.ok) {\n        setIsEmailVerified(true);\n        setCurrentUser(result.user);\n        return { success: true, message: 'Email verified successfully!' };\n      } else {\n        throw new Error(result.message || 'Verification failed');\n      }\n    } catch (error) {\n      console.error('Verification error:', error);\n      return { success: false, message: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = async (email, password, captchaToken, source = 'unknown') => {\n    try {\n      console.log('🚀 Login attempt started from:', source, { email, API_BASE_URL });\n      console.log('🔍 Parameters received:', { email, password: '[HIDDEN]', captchaToken, source });\n      console.log('🔍 CALL STACK:', new Error().stack);\n      setLoading(true);\n      \n      const trackingInfo = await getUserInfo();\n      console.log('📊 Tracking info:', trackingInfo);\n      \n      const loginUrl = `${API_BASE_URL}/auth/login`;\n      console.log('🌐 Making request to:', loginUrl);\n      \n      const requestBody = { \n        email, \n        password, \n        captchaToken,\n        trackingInfo \n      };\n      console.log('📝 Request body:', { ...requestBody, password: '[HIDDEN]' });\n      \n      const response = await fetch(loginUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody)\n      });\n\n      console.log('📡 Response status:', response.status);\n      console.log('📡 Response headers:', Object.fromEntries(response.headers.entries()));\n\n      const result = await response.json();\n      console.log('📦 Response data:', { ...result, token: result.token ? '[TOKEN]' : 'NO_TOKEN' });\n      \n      if (response.ok) {\n        console.log('✅ Login successful, setting user:', result.user);\n        setCurrentUser(result.user);\n        setIsEmailVerified(result.user.emailVerified);\n        setUserSession(trackingInfo);\n        localStorage.setItem('token', result.token);\n        console.log('✅ Token saved to localStorage:', result.token ? 'YES' : 'NO');\n        console.log('✅ Current user set:', !!result.user);\n        return { success: true, user: result.user };\n      } else {\n        // Check if this is an email verification error\n        if (response.status === 403 && result.error === 'Email not verified') {\n          return { \n            success: false, \n            message: 'Email not verified. Please verify your email before logging in.',\n            needsVerification: true, \n            email: result.email \n          };\n        } else {\n          throw new Error(result.message || result.error || 'Login failed');\n        }\n      }\n    } catch (error) {\n      console.error('❌ Login error:', error);\n      return { success: false, message: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setCurrentUser(null);\n    setIsEmailVerified(false);\n    setUserSession({});\n    localStorage.removeItem('token');\n  };\n\n  // Resend verification email\n  const resendVerificationEmail = async (email) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/resend-verification`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email })\n      });\n\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Resend verification error:', error);\n      return { success: false, message: error.message };\n    }\n  };\n\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Verify token with backend\n      fetch(`${API_BASE_URL}/auth/verify-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ token })\n      })\n      .then(response => response.json())\n      .then(result => {\n        if (result.success) {\n          setCurrentUser(result.user);\n          setIsEmailVerified(result.user.emailVerified);\n        } else {\n          localStorage.removeItem('token');\n        }\n      })\n      .catch(error => {\n        console.error('Token verification failed:', error);\n        localStorage.removeItem('token');\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const value = {\n    currentUser,\n    isEmailVerified,\n    userSession,\n    signup,\n    login,\n    logout,\n    verifyEmail,\n    resendVerificationEmail,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}